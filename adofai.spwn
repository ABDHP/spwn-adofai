extract obj_props
extract obj_ids
extract $
extract import './line.spwn'

input = $.get_input("Enter filename: ")
filename = input.substr(0, input.length - 1)

// constants

directions = {
	w:   0,	y:  30,	e:  45,j:  60,
	d:  90, m: 120, c: 135, b: 150,
	s: 180, v: 210, z: 225, n: 240,
	a: 270, h: 300, q: 315, t: 330,	
}
step = 60

pi = 3.141592653589793

blocks = { 
	dot: 725,
	glow: 503,
	fireball: 1582,
	speed: 1766,
	twirl: 1752,
}

speed4x = 19.1846522782

let data = readfile(filename, 'json')

(){
	speed = data.speed if data has "speed" else 1
	data.bpm *= speed
	for i in ..data.events.length { if data.events[i].evType == 'speed' { data.events[i].bpm *= speed } }
}()
zoom = data.zoom if data has "zoom" else 1

cus_of = data has 'offset'
offset = data.offset - 0.05 if cus_of else null

// macros

deg2rad = deg => deg * pi / 180

fix_dir =   dir  => dir % 360
fix_Dir = (&dir) {
	dir = fix_dir(dir)
	return dir
}

round_two = (number) {
	let number = number
	number *= 100
	number = round(number)
	number *= 0.01
	return number
}

add_road = (p1, p2, dir) {
	[x1, y1] = p1
	[x2, y2] = p2
	if x1 == x2 {
		dye = (y2 - y1) / 8
		for i in 1..2..8 {
			cury = y1 + i * dye
			add(obj{
				DONT_FADE: true,
				OBJ_ID: blocks.glow,
				X: (x1 - 5)  * zoom,
				Y: cury      * zoom,
				SCALING: 0.5 * zoom,
				ROTATION: 270,
				GROUPS: 1g

			})
			add(obj{
				DONT_FADE: true,
				OBJ_ID: blocks.glow,
				X: (x1 + 5)  * zoom,
				Y: cury      * zoom,
				SCALING: 0.5 * zoom,
				ROTATION: 90,
				GROUPS: 1g
			})
		}
	} else if y1 == y2 {
		dxe = (x2 - x1) / 8
		for i in 1..2..8 {
			curx = x1 + i * dxe
			add(obj{
				DONT_FADE: true,
				OBJ_ID: blocks.glow,
				X: curx      * zoom,
				Y: (y1 + 5)  * zoom,
				SCALING: 0.5 * zoom,
				ROTATION: 0,
				GROUPS: 1g
			})
			add(obj{
				DONT_FADE: true,
				OBJ_ID: blocks.glow,
				X: curx      * zoom,
				Y: (y1 - 5)  * zoom,
				SCALING: 0.5 * zoom,
				ROTATION: 180,
				GROUPS: 1g
			})
		}
	} else {
		line = line_by_points(p1, p2)
		k = line.k
		for n in 1..2..8 {
			i = p1[0] + n * (p2[0] - p1[0]) / 8
			perp = @line::new(-1/k, i*k + i/k + line.b) // you don't have to understand this
			dx = 5 * k / sqrt(1 + k**2) // this either
			for d in [-1, 1] {
				x = i + d*dx
				y = perp.get_y(x)
				cdir = fix_dir(dir + d * (90 if k > 0 else -90) * (1 if (dir < 90 || dir > 270) else -1))
				add(obj{
					DONT_FADE: true,
					OBJ_ID: blocks.glow,
					X: x * zoom,
					Y: y * zoom,
					SCALING: 0.5 * zoom,
					ROTATION: cdir,
					GROUPS: 1g
				})
			}
		}
	}
}

rotate = (pl, bpm, deg, reverse) {
	main = [2g, 3g][pl]
	cent = [3g, 2g][pl]
	dur  = deg / 3 / bpm
	return [
		!{ main.rotate(cent, deg * (-1 if reverse else 1), deg / 3 / bpm) },
		dur
	]
}

move_camera = (cam_x, cam_y, dest_x, dest_y, bpm, deg) {
	dx = (dest_x - cam_x) / 3
	dy = (dest_y - cam_y) / 3
	return [
		dx,
		dy,
	]
}

// the actual code
// drawing

path_strarr = data.path.split('')
let path = [[0, 0]]
(){
	let x = 0
	let y = 0
	for i in path_strarr {
		x += step * sin(deg2rad(directions[i])); x = round_two(x)
		y += step * cos(deg2rad(directions[i])); y = round_two(y)
		path.push([x, y])
	}
}()

for p in path {
	add(obj{
		DONT_FADE: true,
		OBJ_ID: blocks.dot,
		X: p[0] * zoom,
		Y: p[1] * zoom,
		SCALING: 3.5 * zoom,
		GROUPS: 1g,
	})
}

for i in ..(path.length - 1) {
	add_road(path[i], path[i+1], directions[path_strarr[i]])
}

(){
	let cur_bpm = data.bpm
	for i in ..data.events.length {
		e = data.events[i]
		switch e.evType {
			case 'speed': (){
				if e.bpm != cur_bpm {
					faster = e.bpm > cur_bpm
					add(obj{
						DONT_FADE: true,
						OBJ_ID: blocks.speed,
						X: path[e.floor][0] * zoom,
						Y: path[e.floor][1] * zoom,
						SCALING: 2 * zoom,
						COLOR: 5c if faster else 6c,
						ROTATION: fix_dir(directions[path_strarr[e.floor - 1]] + (0 if faster else 180)),
						GROUPS: 1g
					})
					cur_bpm = e.bpm
				}
			}()
			case 'twirl': (){
				add(obj{
					DONT_FADE: true,
					OBJ_ID: blocks.twirl,
					X: path[e.floor][0] * zoom,
					Y: path[e.floor][1] * zoom,
					SCALING: 0.5 * zoom,
					COLOR: 4c,
					GROUPS: 1g
				})
			}()
		}
	}
}()

add(obj{
	DONT_FADE: true,
	OBJ_ID: blocks.dot,
	X: 0,
	Y: 0,
	SCALING: 2.4 * zoom,
	Z_LAYER: 20,
	COLOR: 2c,
	COLOR_2: 1c,
	GROUPS: [1g, 2g]
})
add(obj{
	DONT_FADE: true,
	OBJ_ID: blocks.dot,
	X: -60 * zoom,
	Y: 0,
	SCALING: 2.4 * zoom,
	Z_LAYER: 20,
	COLOR: 3c,
	COLOR_2: 1c,
	GROUPS: [1g, 3g]
})

db = ?g
add(obj{  //killing block
	OBJ_ID: 1,
	X: 0,
	Y: 15,
	GROUPS: db
})
db.lock_to_player()
db.alpha(0)
db.toggle_off()

// gp data

let gp = [{
	bpm: data.bpm,
	reverse: false,
	deg: fix_dir(directions[path_strarr[0]] + 90)
}]
for i in 1..path_strarr.length {
	u = path_strarr[i]
	li = gp.length - 1
	let uo = {
		bpm: gp[li].bpm,
		reverse: gp[li].reverse,
	}
	for e in data.events {
		if e.floor == i {
			switch e.evType {
				case 'speed': (){ uo.bpm     = e.bpm       }()
				case 'twirl': (){ uo.reverse = !uo.reverse }()
			}
		}
	}
	let uo.deg = fix_dir(180 + (-1 if uo.reverse else 1) * (directions[u] - (directions[path_strarr[i-1]] if i > 0 else 90)))
	if uo.deg == 0 { uo.deg += 360 }
	gp.push(uo)
}

let stops = []

(){
	let totDur = 0
	let cx = 0
	let cy = 0
	if cus_of {
		deg = round(3 * gp[0].bpm * offset)
		3g.rotate(2g, fix_dir(180 - deg))
		func = rotate(1, gp[0].bpm, deg, gp[0].reverse)[0]
		stops.push(func)
		call_with_delay(0.05, func)
		totDur = offset + 0.05
	}
	for i in (1 if cus_of else 0)..gp.length {
		last = i + 1 == gp.length
		u = gp[i]
		[func, dur] = rotate(1 - (i % 2), u.bpm, u.deg, u.reverse)
		[dcx, dcy] = move_camera(cx, cy,
			path[i][0] / 30 * zoom if last else (path[i][0] + path[i+1][0]) / 60 * zoom,
			path[i][1] / 30 * zoom if last else (path[i][1] + path[i+1][1]) / 60 * zoom,
			u.bpm, u.deg
		)
		nx = cx + dcx
		ny = cy + dcy
		funcT = !{
			func!
			1g.move(-(nx-cx)*10, -(ny-cy)*10, dur)
		}
		call_with_delay(round_two(totDur), funcT)
		stops.push(funcT)
		cx += dcx
		cy += dcy
		totDur += dur
	}
	lgu = gp  [gp  .length - 1]
	lpu = path[path.length - 1]
	dur = 60 / lgu.bpm
	call_with_delay(round_two(totDur), !{
		rotate(1 - (gp.length % 2), lgu.bpm, 99999, lgu.reverse)[0]!
		1g.move(-(lpu[0]/30*zoom - cx)*10, -(lpu[1]/30*zoom - cy)*10, dur, EASE_OUT)
	})
	print("gp length: ", totDur)
	add(obj{
		OBJ_ID: 1,
		X: (totDur + 2) * speed4x * 30,
		Y: -20,
	})
}()

clicks = [
	counter(?i, bits = 2),
	counter(?i, bits = 2),
	counter(?i, bits = 2),
]
for i in clicks { i = 1 }
index = counter(?i, bits = 2)
misses = counter(data.misses if data has 'misses' else 5)

miss = !{
	BG.pulse(255, 255, 0, fade_out = 1)
}
lose = !{
	miss.start_group.stop()
	-> BG.pulse(255, 0, 0, fade_out = 2)
	db.toggle_on()
	for i in stops {
		i.start_group.stop()
		i.start_group.toggle_off()
	}
}

hide_player()
toggle_bg_effect();
1g.move(25, 50)
1g.lock_to_player(true, false)

if (!data.auto if data has 'auto' else true) {
	(){
		angle = data.angle if data has 'angle' else 30
		let totWait = 0
		if cus_of { totWait = offset - 60 / gp[0].bpm }
		w = (time, call, func) {
			totWait += time
			if call {
				call_with_delay(totWait, func)
				stops.push(func)
			}
		}
		click_timing_start = [
			!{ if clicks[0] < 2 { clicks[0]++ } },
			!{ if clicks[1] < 2 { clicks[1]++ } },
			!{ if clicks[2] < 2 { clicks[2]++ } },
		]
		click_timing_end   = [
			!{ if clicks[0] > 1 { lose! } },
			!{ if clicks[1] > 1 { lose! } },
			!{ if clicks[2] > 1 { lose! } },
		]
		for i in ..gp.length {
			u = gp[i]
			w(angle / 3 / u.bpm, i != 0, click_timing_end[(i - 1) % 3])
			w((u.deg - 2 * angle) / (3 * u.bpm), true, click_timing_start[i % 3])
			w(angle / 3 / u.bpm, false, !{})
		}
		li = gp.length - 1
		w(angle / 3 / gp[li].bpm, true, click_timing_end[li % 3])
	}()

	[[on(touch())]] !{
		if clicks[index.to_const(..3)] == 2 {
			clicks[index.to_const(..3)]--
			index++
			if index >= 3 { index -= 3 }
		} else {
			misses--
			if misses == 0 { lose! }
			else { miss! }
		}
	}
}
